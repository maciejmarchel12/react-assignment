{"version":3,"file":"static/js/332.8f22e494.chunk.js","mappings":"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","sources":["api/tmdb-api.js","components/cardIcons/addToFavorites.js","components/spinner/index.js","components/headerMovieList/index.js","components/filterMoviesCard/index.js","components/movieCard/index.js","components/movieList/index.js","components/templateMovieListPage/index.js","pages/upcoming.js"],"sourcesContent":["export const getMovies = () => {\r\n    return fetch(\r\n      `https://api.themoviedb.org/3/discover/movie?api_key=${process.env.REACT_APP_TMDB_KEY}&language=en-US&include_adult=false&include_video=false&page=1`\r\n    ).then((response) => {\r\n      if (!response.ok) {\r\n        throw new Error(response.json().message);\r\n      }\r\n      return response.json();\r\n    })\r\n    .catch((error) => {\r\n       throw error\r\n    });\r\n  };\r\n  \r\n  export const getMovie = (args) => {\r\n    console.log(args)\r\n    const [, idPart] = args.queryKey;\r\n    const { id } = idPart;\r\n    return fetch(\r\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${process.env.REACT_APP_TMDB_KEY}`\r\n    ).then((response) => {\r\n      if (!response.ok) {\r\n        throw new Error(response.json().message);\r\n      }\r\n      return response.json();\r\n    })\r\n    .catch((error) => {\r\n      throw error\r\n   });\r\n  };\r\n  \r\n  export const getGenres = async () => {\r\n    return fetch(\r\n      \"https://api.themoviedb.org/3/genre/movie/list?api_key=\" +\r\n        process.env.REACT_APP_TMDB_KEY +\r\n        \"&language=en-US\"\r\n    ).then( (response) => {\r\n      if (!response.ok) {\r\n        throw new Error(response.json().message);\r\n      }\r\n      return response.json();\r\n    })\r\n    .catch((error) => {\r\n      throw error\r\n   });\r\n  };\r\n  \r\n  export const getMovieImages = ({ queryKey }) => {\r\n    const [, idPart] = queryKey;\r\n    const { id } = idPart;\r\n    return fetch(\r\n      `https://api.themoviedb.org/3/movie/${id}/images?api_key=${process.env.REACT_APP_TMDB_KEY}`\r\n    ).then( (response) => {\r\n      if (!response.ok) {\r\n        throw new Error(response.json().message);\r\n      }\r\n      return response.json();\r\n  \r\n    })\r\n    .catch((error) => {\r\n      throw error\r\n   });\r\n  };\r\n\r\n  export const getMovieReviews = (id) => {\r\n    return fetch(\r\n      `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${process.env.REACT_APP_TMDB_KEY}`\r\n    )\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        // console.log(json.results);\r\n        return json.results;\r\n      });\r\n  };\r\n\r\n  export const getUpcoming = () => {\r\n    return fetch(\r\n      `https://api.themoviedb.org/3/movie/upcoming?api_key=${process.env.REACT_APP_TMDB_KEY}&language=en-US&page=1`\r\n    )\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(response.json().message);\r\n        }\r\n        return response.json();\r\n      })\r\n      .catch((error)=> {\r\n        throw error\r\n      });\r\n  }\r\n\r\n  //Trending STATIC ENDPOINT API\r\n  export const getTrending = () => {\r\n    return fetch(\r\n      `https://api.themoviedb.org/3/movie/popular?api_key=${process.env.REACT_APP_TMDB_KEY}&language=en-US&page=1`\r\n    )\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        return response.json().then((errorData) => {\r\n          throw new Error(errorData.message || 'Failed to fetch latest movies');\r\n        });\r\n      }\r\n      return response.json();\r\n    })\r\n    .catch((error) => {\r\n      throw error;\r\n    });\r\n  };\r\n\r\n  //Now Playing STATIC ENDPOINT API\r\n  export const getNowPlaying = () => {\r\n    return fetch(\r\n      `https://api.themoviedb.org/3/movie/now_playing?api_key=${process.env.REACT_APP_TMDB_KEY}&language=en-US&page=1`\r\n    )\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        return response.json().then((errorData) => {\r\n          throw new Error(errorData.message || 'Failed to fetch latest movies');\r\n        });\r\n      }\r\n      return response.json();\r\n    })\r\n    .catch((error) => {\r\n      throw error;\r\n    });\r\n  };\r\n\r\n  //TOP RATED STATIC ENDPOINT API\r\n  export const getTopRated = () => {\r\n    return fetch(\r\n      `https://api.themoviedb.org/3/movie/top_rated?api_key=${process.env.REACT_APP_TMDB_KEY}&language=en-US&page=1`\r\n    )\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        return response.json().then((errorData) => {\r\n          throw new Error(errorData.message || 'Failed to fetch latest movies');\r\n        });\r\n      }\r\n      return response.json();\r\n    })\r\n    .catch((error) => {\r\n      throw error;\r\n    });\r\n  };\r\n\r\n//RECOMMENDED MOVIES API\r\n  export const getRecommendations = (args) => {\r\n    const [, idPart] = args.queryKey\r\n    const { id } = idPart;\r\n    return fetch(\r\n      `https://api.themoviedb.org/3/movie/${id}/recommendations?api_key=${process.env.REACT_APP_TMDB_KEY}&page=1`\r\n    )\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        throw new Error(response.json().message);\r\n      }\r\n      return response.json();\r\n    })\r\n    .catch((error) => {\r\n      throw error\r\n    })\r\n  };\r\n\r\n  export const getSimilar = (args) => {\r\n    const [, idPart] = args.queryKey\r\n    const { id } = idPart;\r\n    return fetch(\r\n      `https://api.themoviedb.org/3/movie/${id}/similar?api_key=${process.env.REACT_APP_TMDB_KEY}`\r\n    )\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        throw new Error(response.json().message);\r\n      }\r\n      return response.json();\r\n    })\r\n    .catch((error) => {\r\n      throw error\r\n    })\r\n  };","import React, { useContext } from \"react\";\r\nimport { MoviesContext } from \"../../contexts/moviesContext\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\n\r\nconst AddToFavoritesIcon = ({ movie }) => {\r\n  const context = useContext(MoviesContext);\r\n\r\n  const handleAddToFavorites = (e) => {\r\n    e.preventDefault();\r\n    if (context.addToFavorites) {\r\n      context.addToFavorites(movie);\r\n    } else {\r\n      console.error(\"addToFavorites function is not defined in the context\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <IconButton aria-label=\"add to favorites\" onClick={handleAddToFavorites}>\r\n      <FavoriteIcon color=\"primary\" fontSize=\"large\" />\r\n    </IconButton>\r\n  );\r\n};\r\n\r\nexport default AddToFavoritesIcon;","import React from 'react';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\nexport default function CircularIndeterminate() {\r\n  return (\r\n    <div sx={{\r\n        display: 'flex',\r\n        justifyContent: \"center\",\r\n        '& > * + *': {\r\n          marginLeft: '2em',\r\n        }}}>\r\n      <CircularProgress />\r\n      <CircularProgress />\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Header = (props ) => {\r\n  const title = props.title\r\n  const navigate = useNavigate();\r\n  return (\r\n    <Paper \r\n      component=\"div\" \r\n      sx={{\r\n        display: \"flex\",\r\n        justifyContent: \"space-around\",\r\n        flexWrap: \"wrap\",\r\n        marginBottom: 1.5,\r\n      }}\r\n      >\r\n      <IconButton aria-label=\"go back\" onClick={() => navigate(-1)}>\r\n        <ArrowBackIcon color=\"primary\" fontSize=\"large\" />\r\n      </IconButton>\r\n\r\n      <Typography variant=\"h4\" component=\"h3\">\r\n        {title}\r\n      </Typography>\r\n      <IconButton aria-label=\"go forward\" onClick={() => navigate(+1)}>\r\n        <ArrowForwardIcon color=\"primary\" fontSize=\"large\" />\r\n      </IconButton>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default Header;","import React, {useState, useEffect}  from \"react\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Select from \"@mui/material/Select\";\r\nimport img from '../../images/pexels-dziana-hasanbekava-5480827.jpg'\r\nimport { getGenres, getMovies} from \"../../api/tmdb-api\";\r\nimport { Button } from \"@mui/material\";\r\nimport { useQuery } from \"react-query\";\r\nimport Spinner from '../spinner'\r\n\r\nconst formControl = \r\n  {\r\n    margin: 1,\r\n    minWidth: 220,\r\n    backgroundColor: \"rgb(255, 255, 255)\"\r\n  };\r\n\r\n  const sortOptions = [\r\n    { value: \"popularity.desc\", label: \"Popularity Desc\" },\r\n    { value: \"popularity.asc\", label: \"Popularity Asc\" },\r\n    { value: \"release_date.desc\", label: \"Release Date Desc\" },\r\n    { value: \"release_date.asc\", label: \"Release Date Asc\" },\r\n  ];\r\n\r\nexport default function FilterMoviesCard(props) {\r\n\r\n    const { data, error, isLoading, isError} = useQuery(\"genres\", getGenres);\r\n\r\n    if (isLoading) {\r\n      return <Spinner />;\r\n    }\r\n  \r\n    if (isError) {\r\n      return <h1>{error.message}</h1>;\r\n    }\r\n    const genres = data.genres;\r\n    if (genres[0].name !== \"All\"){\r\n      genres.unshift({ id: \"0\", name: \"All\" });\r\n    }\r\n    const handleChange = (e, type, value) => {\r\n      e.preventDefault();\r\n      props.onUserInput(type, value); // NEW\r\n    };\r\n  \r\n    const handleTextChange = (e, props) => {\r\n      handleChange(e, \"name\", e.target.value);\r\n    };\r\n  \r\n    const handleGenreChange = (e) => {\r\n      handleChange(e, \"genre\", e.target.value);\r\n    };\r\n\r\n    const handleSortChange = (e) => {\r\n      handleChange(e, \"sort\", e.target.value);\r\n    };\r\n\r\n  return (\r\n    <Card \r\n      sx={{\r\n        maxWidth: 345,\r\n        backgroundColor: \"lightslategrey\"\r\n      }} \r\n      variant=\"outlined\">\r\n      <CardContent>\r\n        <Typography variant=\"h5\" component=\"h1\">\r\n          <SearchIcon fontSize=\"large\" />\r\n          Filter the movies.\r\n        </Typography>\r\n        <TextField\r\n      sx={{...formControl}}\r\n      id=\"filled-search\"\r\n      label=\"Search field\"\r\n      type=\"search\"\r\n      variant=\"filled\"\r\n      value={props.titleFilter}\r\n      onChange={handleTextChange}\r\n    />\r\n        <FormControl sx={{...formControl}}>\r\n          <InputLabel id=\"genre-label\">Genre</InputLabel>\r\n          <Select\r\n    labelId=\"genre-label\"\r\n    id=\"genre-select\"\r\n    defaultValue=\"\"\r\n    value={props.genreFilter}\r\n    onChange={handleGenreChange}\r\n  >\r\n            {genres.map((genre) => {\r\n              return (\r\n                <MenuItem key={genre.id} value={genre.id}>\r\n                  {genre.name}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n        </FormControl>\r\n        <FormControl sx={{ ...formControl }}>\r\n          <InputLabel id=\"sort-label\">Sort By</InputLabel>\r\n          <Select\r\n            labelId=\"sort-label\"\r\n            id=\"sort-select\"\r\n            defaultValue=\"\"\r\n            onChange={handleSortChange}\r\n          >\r\n            {sortOptions.map((option) => (\r\n              <MenuItem key={option.value} value={option.value}>\r\n                {option.label}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </CardContent>\r\n      <CardMedia\r\n        sx={{ height: 300 }}\r\n        image={img}\r\n        title=\"Filter\"\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"h5\" component=\"h1\">\r\n          <SearchIcon fontSize=\"large\" />\r\n          Filter the movies.\r\n          <br />\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","import React, { useContext  } from \"react\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport CardHeader from \"@mui/material/CardHeader\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\nimport CalendarIcon from \"@mui/icons-material/CalendarTodayTwoTone\";\r\nimport StarRateIcon from \"@mui/icons-material/StarRate\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport img from '../../images/film-poster-placeholder.png'\r\nimport { Link } from \"react-router-dom\";\r\nimport Avatar from '@mui/material/Avatar';\r\nimport { MoviesContext } from \"../../contexts/moviesContext\";\r\n\r\nexport default function MovieCard({ movie, action }) {\r\n    const { favorites, addToFavorites, mustWatch, addToMustWatch } = useContext(MoviesContext);\r\n\r\n    if (favorites.find((id) => id === movie.id)) {\r\n      movie.favorite = true;\r\n    } else {\r\n      movie.favorite = false\r\n    }\r\n  \r\n    const handleAddToFavorite = (e) => {\r\n      e.preventDefault();\r\n      addToFavorites(movie);\r\n    };\r\n\r\n    if (mustWatch.find((id) => id === movie.id)) {\r\n      movie.mustWatch = true;\r\n    } else {\r\n      movie.mustWatch = false\r\n    }\r\n\r\n    const handleAddToMustWatch = (e) => {\r\n      e.preventDefault();\r\n      addToMustWatch(movie);\r\n    };\r\n\r\n  return (\r\n    <Card sx={{ maxWidth: 345, backgroundColor: \"beige\" }}>\r\n            <CardHeader\r\n        avatar={\r\n          movie.favorite ? (\r\n            <Avatar sx={{ backgroundColor: 'red' }}>\r\n              <FavoriteIcon />\r\n            </Avatar>\r\n          ) : null\r\n        }\r\n        title={\r\n          <Typography variant=\"h6\" component=\"p\">\r\n            {movie.title}{\" \"}\r\n          </Typography>\r\n        }\r\n      />\r\n      <CardMedia\r\n        sx={{ height: 500 }}\r\n        image={\r\n          movie.poster_path\r\n            ? `https://image.tmdb.org/t/p/w500/${movie.poster_path}`\r\n            : img\r\n        }\r\n      />\r\n      <CardContent>\r\n        <Grid container>\r\n          <Grid item xs={6}>\r\n            <Typography variant=\"h6\" component=\"p\">\r\n              <CalendarIcon fontSize=\"small\" />\r\n              {movie.release_date}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Typography variant=\"h6\" component=\"p\">\r\n              <StarRateIcon fontSize=\"small\" />\r\n              {\"  \"} {movie.vote_average}{\" \"}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <CardActions disableSpacing>\r\n        {action(movie)}\r\n        <Link to={`/movies/${movie.id}`}>\r\n          <Button variant=\"outlined\" size=\"medium\" color=\"primary\">\r\n            More Info ...\r\n          </Button>\r\n        </Link>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}","import React from \"react\";\r\nimport Movie from \"../movieCard\";\r\nimport Grid from \"@mui/material/Grid\";\r\n\r\nconst MovieList = ( {movies, action }) => {\r\n  let movieCards = movies.map((m) => (\r\n    <Grid key={m.id} item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n      <Movie key={m.id} movie={m} action={action} />\r\n    </Grid>\r\n  ));\r\n  return movieCards;\r\n};\r\n\r\nexport default MovieList;","import React, { useState } from \"react\";\r\nimport Header from \"../headerMovieList\";\r\nimport FilterCard from \"../filterMoviesCard\";\r\nimport MovieList from \"../movieList\";\r\nimport Grid from \"@mui/material/Grid\";\r\n\r\nfunction MovieListPageTemplate({ movies, title, action }) {\r\n  const [nameFilter, setNameFilter] = useState(\"\");\r\n  const [genreFilter, setGenreFilter] = useState(\"0\");\r\n  const [sortOption, setSortOption] = useState(\"\"); // NEW \r\n\r\n  const genreId = Number(genreFilter);\r\n\r\n  function compareByPopularity(a, b) {\r\n    const popularityA = parseFloat(a.popularity);\r\n    const popularityB = parseFloat(b.popularity);\r\n\r\n    return popularityA - popularityB;\r\n  }\r\n\r\n  let displayedMovies = movies\r\n    .filter((m) => {\r\n      return m.title.toLowerCase().search(nameFilter.toLowerCase()) !== -1;\r\n    })\r\n    .filter((m) => {\r\n      return genreId > 0 ? m.genre_ids.includes(genreId) : true;\r\n    });\r\n\r\n  // Sorting logic\r\n  if (sortOption === \"popularity.desc\") {\r\n    displayedMovies = displayedMovies.sort(compareByPopularity).reverse();\r\n  } else if (sortOption === \"popularity.asc\") {\r\n    displayedMovies = displayedMovies.sort(compareByPopularity);\r\n  } else if (sortOption === \"release_date.desc\") {\r\n    displayedMovies = displayedMovies.sort((a, b) => {\r\n      return new Date(b.release_date) - new Date(a.release_date);\r\n    });\r\n  } else if (sortOption === \"release_date.asc\") {\r\n    displayedMovies = displayedMovies.sort((a, b) => {\r\n      return new Date(a.release_date) - new Date(b.release_date);\r\n    });\r\n  }\r\n\r\n  const handleChange = (type, value) => {\r\n    if (type === \"name\") setNameFilter(value);\r\n    else if (type === \"genre\") setGenreFilter(value);\r\n    else if (type === \"sort\") setSortOption(value); // NEW\r\n  };\r\n\r\n  return (\r\n    <Grid container sx={{ padding: '20px', backgroundColor: \"lightgrey\" }}>\r\n      <Grid item xs={12}>\r\n        <Header title={title} />\r\n      </Grid>\r\n      <Grid item container spacing={5}>\r\n        <Grid key=\"find\" item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n          <FilterCard\r\n            onUserInput={handleChange}\r\n            titleFilter={nameFilter}\r\n            genreFilter={genreFilter}\r\n          />\r\n        </Grid>\r\n        <MovieList action={action} movies={displayedMovies}></MovieList>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\nexport default MovieListPageTemplate;","import React, { lazy, Suspense } from \"react\";\r\nimport PageTemplate from '../components/templateMovieListPage'\r\nimport AddToFavoritesIcon from '../components/cardIcons/addToFavorites'\r\nimport { getUpcoming } from \"../api/tmdb-api\";\r\nimport { useQuery } from 'react-query';\r\nimport Spinner from '../components/spinner';\r\nimport PlaylistAddIcon from '@mui/icons-material/PlaylistAdd';\r\nconst AddToMustWatchIcon = lazy(() => import(\"../components/cardIcons/addToMustWatch\"));\r\n\r\nconst Upcoming = (props) => {\r\n\r\n  const { data, error, isLoading, isError } = useQuery('upcoming',getUpcoming);\r\n\r\n  if (isLoading) {\r\n    return <Spinner />\r\n  }\r\n\r\n  if (isError) {\r\n    return <h1>{error.message}</h1>\r\n  }\r\n\r\n  const movies = data.results\r\n\r\n  const mustWatch = movies.filter(m => m.mustWatch)\r\n  localStorage.setItem('favourites', JSON.stringify(mustWatch))\r\n  const addToMustWatch = (movieId) => true\r\n\r\n/*   const favorites = movies.filter(m => m.favorite)\r\n  localStorage.setItem('favourites', JSON.stringify(favorites))\r\n  const addToFavorites = (movieId) => true */\r\n\r\n  return (\r\n    <Suspense fallback={<Spinner />}>\r\n    <PageTemplate\r\n      title='Discover Movies'\r\n      movies={movies}\r\n      action={(movie) => {\r\n        return <AddToMustWatchIcon movie={movie} />\r\n      }}\r\n    />\r\n    </Suspense>\r\n  );\r\n};\r\nexport default Upcoming;\r\n\r\n// IMPORTANT COMMENT: already refactored to included caching in exercise 1\r\n\r\n/* const Upcoming = (props) => {\r\n  \r\n  const favorites = movies.filter(m => m.favorite)\r\n  localStorage.setItem('favorites', JSON.stringify(favorites))\r\n\r\n  const addToFavorites = (movieId) => {\r\n    const updatedMovies = movies.map((m) =>\r\n      m.id === movieId ? { ...m, favorite: true } : m\r\n    );\r\n    setMovies(updatedMovies);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUpcoming().then(movies => {\r\n      setMovies(movies);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <PageTemplate\r\n      title='Discover Movies'\r\n      movies={movies}\r\n      action={(movie) => {\r\n        return <AddToFavoritesIcon movie={movie} />\r\n      }}\r\n    />\r\n  );\r\n}; */\r\n"],"names":["getMovies","fetch","concat","process","then","response","ok","Error","json","message","catch","error","getMovie","args","console","log","idPart","queryKey","id","getGenres","async","getMovieImages","_ref","getMovieReviews","res","results","getUpcoming","getTrending","errorData","getNowPlaying","getTopRated","getRecommendations","getSimilar","movie","context","useContext","MoviesContext","_jsx","IconButton","onClick","e","preventDefault","addToFavorites","children","FavoriteIcon","color","fontSize","CircularIndeterminate","_jsxs","sx","display","justifyContent","marginLeft","CircularProgress","props","title","navigate","useNavigate","Paper","component","flexWrap","marginBottom","ArrowBackIcon","Typography","variant","ArrowForwardIcon","formControl","margin","minWidth","backgroundColor","sortOptions","value","label","FilterMoviesCard","data","isLoading","isError","useQuery","Spinner","genres","name","unshift","handleChange","type","onUserInput","Card","maxWidth","CardContent","SearchIcon","TextField","titleFilter","onChange","handleTextChange","target","FormControl","InputLabel","Select","labelId","defaultValue","genreFilter","map","genre","MenuItem","option","CardMedia","height","image","img","MovieCard","action","favorites","mustWatch","addToMustWatch","find","favorite","CardHeader","avatar","Avatar","poster_path","Grid","container","item","xs","CalendarIcon","release_date","StarRateIcon","vote_average","CardActions","disableSpacing","Link","to","Button","size","movies","m","sm","md","lg","xl","Movie","nameFilter","setNameFilter","useState","setGenreFilter","sortOption","setSortOption","genreId","Number","compareByPopularity","a","b","parseFloat","popularity","displayedMovies","filter","toLowerCase","search","genre_ids","includes","sort","reverse","Date","padding","Header","spacing","FilterCard","MovieList","AddToMustWatchIcon","lazy","localStorage","setItem","JSON","stringify","Suspense","fallback","PageTemplate"],"sourceRoot":""}